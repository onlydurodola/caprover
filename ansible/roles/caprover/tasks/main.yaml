- name: Set Python interpreter
  set_fact:
    ansible_python_interpreter: /usr/bin/python3.8

- name: Check if CapRover is already installed
  stat:
    path: /captain/data/config-captain.json
  register: caprover_installed

- name: Install prerequisites (if not installed)
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - software-properties-common
      - git
      - ufw
    state: present
    update_cache: true
  when: not caprover_installed.stat.exists

- name: Add Node.js repository (if needed)
  shell: |
    curl -sL https://deb.nodesource.com/setup_18.x | bash -
  args:
    creates: /etc/apt/sources.list.d/nodesource.list
  when: not caprover_installed.stat.exists

- name: Install Node.js (if needed)
  apt:
    name: nodejs
    state: present
    update_cache: true
  when: not caprover_installed.stat.exists

- name: Create Docker GPG key directory
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: 0755
  when: not caprover_installed.stat.exists

- name: Download Docker GPG key
  get_url:
    url: https://download.docker.com/linux/ubuntu/gpg
    dest: /etc/apt/keyrings/docker.asc
    mode: '0644'
    validate_certs: no
  when: not caprover_installed.stat.exists

- name: Add Docker repository with key verification
  shell: |
    echo "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] \
    https://download.docker.com/linux/ubuntu \
    {{ ansible_distribution_release }} stable" > /etc/apt/sources.list.d/docker.list
  args:
    creates: /etc/apt/sources.list.d/docker.list
  when: not caprover_installed.stat.exists

- name: Force update APT cache
  apt:
    update_cache: true
    force_apt_get: true
  when: not caprover_installed.stat.exists

- name: Install Docker components (if needed)
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
    state: present
    update_cache: true
  when: not caprover_installed.stat.exists
  notify: restart docker

- name: Install Docker Compose (if needed)
  get_url:
    url: https://github.com/docker/compose/releases/download/1.29.2/docker-compose-Linux-x86_64
    dest: /usr/local/bin/docker-compose
    mode: '0755'
  when: not caprover_installed.stat.exists

- name: Ensure Docker is running
  systemd:
    name: docker
    state: started
    enabled: true

- name: Configure UFW ports (idempotent)
  ufw:
    rule: allow
    port: "{{ item.port }}"
    proto: "{{ item.proto }}"
  loop:
    - { port: 80, proto: tcp }
    - { port: 443, proto: tcp }
    - { port: 3000, proto: tcp }
    - { port: 996, proto: tcp }
    - { port: 7946, proto: tcp }
    - { port: 7946, proto: udp }
    - { port: 4789, proto: udp }
    - { port: 2377, proto: tcp }
    - { port: 22, proto: tcp }
  when: ansible_os_family == "Debian"
  notify: reload ufw

- name: Enable UFW (if not enabled)
  shell: |
    if ufw status | grep -q 'Status: active'; then
      echo "UFW already enabled"
    else
      ufw --force enable
    fi
  args:
    executable: /bin/bash
  when: ansible_os_family == "Debian"

  

- name: Run CapRover container (if not running)
  docker_container:
    name: caprover
    image: caprover/caprover
    ports:
      - "80:80"
      - "443:443"
      - "3000:3000"
      - "996:996"
      - "7946:7946"
      - "4789:4789"
      - "2377:2377"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /captain:/captain
    env:
      CAPROVER_ROOT_PASSWORD: "{{ vault_caprover_password }}"
      CAPROVER_ROOT_DOMAIN: "{{ domain_name }}"
      ACCEPTED_TERMS: "true"
      MAIN_NODE_IP_ADDRESS: "{{ ansible_host }}"
      BY_PASS_PROXY_CHECK: 'TRUE'
    restart_policy: always
    state: started
  when: not caprover_installed.stat.exists

- name: Install CapRover CLI (if needed)
  npm:
    name: caprover
    global: true
    state: present
  when: not caprover_installed.stat.exists

- name: Configure CapRover dashboard
  command: caprover serversetup --caproverUrl http://captain.{{ domain_name }}
  args:
    creates: /captain/data/config-captain.json
  when: not caprover_installed.stat.exists

- name: Verify CapRover health
  uri:
    url: http://localhost:3000
    status_code: 200
    timeout: 10
  register: health_check
  until: health_check.status == 200
  retries: 10
  delay: 15

- name: Allow VPC CIDR in UFW
  ufw:
    rule: allow
    src: "{{ vpc_cidr }}"
  changed_when: false